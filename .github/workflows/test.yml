name: Test

on:
  push:
  workflow_call:

defaults:
  run:
    shell: bash -l {0}

jobs:
  test:
    runs-on: ubuntu-latest-l
    strategy:
      matrix:
        filesystem: [ext4, xfs]
    steps:
      - name: Setup XFS filesystem
        if: matrix.filesystem == 'xfs'
        run: |
          cd /
          sudo mkdir -p /mnt/xfs
          sudo dd if=/dev/zero of=/mnt/xfs.img bs=2G count=10
          sudo mkfs.xfs -m reflink=1 /mnt/xfs.img
          sudo mount -o loop /mnt/xfs.img $GITHUB_WORKSPACE
          sudo chown $USER:$USER $GITHUB_WORKSPACE
          findmnt

      - name: Setup LVM device
        run: |
          sudo dd if=/dev/zero of=/var/tmp/lvm.img bs=1G count=10
          device=$(sudo losetup --find --show /var/tmp/lvm.img)
          echo "DL_LVM_DEVICE=$device" >> $GITHUB_ENV
          echo "DL_LVM_SIZE=9G" >> $GITHUB_ENV
          echo "DL_LVM_SNAPSHOT_SIZE=1G" >> $GITHUB_ENV
          echo "DL_LVM_FORMAT=${{ matrix.filesystem }}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup development environment
        uses: ./.github/actions/setup-env

      - name: Start background services
        run: dev &

      - name: Build Go binaries
        run: make build

      - name: Use XFS for tmpdirs
        if: matrix.filesystem == 'xfs'
        run: |
          mkdir -p $GITHUB_WORKSPACE/tmp
          export TMPDIR=$GITHUB_WORKSPACE/tmp
          echo "TMPDIR=$GITHUB_WORKSPACE/tmp" >> $GITHUB_ENV
          echo "FORCE_REFLINKS=always" >> $GITHUB_ENV

      - name: Run Go tests
        run: make test-integration

      - name: Run Go benchmarks
        run: make bench
        env:
          DL_OVERLAY_BENCH: true
          DL_LVM_BENCH: true

  test-fuzz:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup development environment
        uses: ./.github/actions/setup-env

      - name: Start background services
        run: dev &

      - name: Install js modules for HardLink tests
        run: make install-js

      - name: Build Go binaries
        run: make build

      - name: Setup DateiLager project
        run: make setup-local

      - name: Start DateiLager server
        run: make server & > server.out

      - name: Wait for DateiLager server
        run: timeout 20 sh -c 'until nc -z $0 $1; do sleep 1; done' localhost 5051

      - name: Run fuzz tests
        run: make test-fuzz

      - name: Get server output
        if: always()
        run: cat server.out

  test-js:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup development environment
        uses: ./.github/actions/setup-env

      - name: Start background services
        run: dev &

      - name: Build Go binaries
        run: make build

      - name: Setup DateiLager project
        run: make setup-local

      - name: Start DateiLager server
        run: make server &

      - name: Wait for DateiLager server
        run: timeout 20 sh -c 'until nc -z $0 $1; do sleep 1; done' localhost 5051

      - name: Run JS tests
        run: make test-js

      - name: Run JS lints
        run: make lint-js

  golangci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.6"

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v5
        with:
          version: latest
          args: --timeout=2m

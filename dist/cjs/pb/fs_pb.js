"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fs = exports.GetCacheResponse = exports.GetCacheRequest = exports.CloneToProjectResponse = exports.CloneToProjectRequest = exports.GcContentsResponse = exports.GcContentsRequest = exports.GcRandomProjectsResponse = exports.GcRandomProjectsRequest = exports.GcProjectResponse = exports.GcProjectRequest = exports.ResetResponse = exports.ResetRequest = exports.SnapshotResponse = exports.SnapshotRequest = exports.InspectResponse = exports.InspectRequest = exports.RollbackResponse = exports.RollbackRequest = exports.UpdateResponse = exports.UpdateRequest = exports.GetUnaryResponse = exports.GetUnaryRequest = exports.GetCompressResponse = exports.GetCompressRequest = exports.GetResponse = exports.GetRequest = exports.ObjectQuery = exports.Objekt = exports.ListProjectsResponse = exports.ListProjectsRequest = exports.Project = exports.DeleteProjectResponse = exports.DeleteProjectRequest = exports.NewProjectResponse = exports.NewProjectRequest = exports.GetCacheResponse_Format = exports.GetCompressResponse_Format = void 0;
/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter long_type_bigint,ts_nocheck,eslint_disable,add_pb_suffix
// @generated from protobuf file "fs.proto" (package "pb", syntax proto3)
// tslint:disable
// @ts-nocheck
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
/**
 * @generated from protobuf enum pb.GetCompressResponse.Format
 */
var GetCompressResponse_Format;
(function (GetCompressResponse_Format) {
    /**
     * @generated from protobuf enum value: S2_TAR = 0;
     */
    GetCompressResponse_Format[GetCompressResponse_Format["S2_TAR"] = 0] = "S2_TAR";
})(GetCompressResponse_Format || (exports.GetCompressResponse_Format = GetCompressResponse_Format = {}));
/**
 * @generated from protobuf enum pb.GetCacheResponse.Format
 */
var GetCacheResponse_Format;
(function (GetCacheResponse_Format) {
    /**
     * @generated from protobuf enum value: S2_TAR = 0;
     */
    GetCacheResponse_Format[GetCacheResponse_Format["S2_TAR"] = 0] = "S2_TAR";
})(GetCacheResponse_Format || (exports.GetCacheResponse_Format = GetCacheResponse_Format = {}));
// @generated message type with reflection information, may provide speed optimized methods
class NewProjectRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.NewProjectRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "template", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "pack_patterns", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0n;
        message.packPatterns = [];
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* optional int64 template */ 2:
                    message.template = reader.int64().toBigInt();
                    break;
                case /* repeated string pack_patterns */ 3:
                    message.packPatterns.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.id);
        /* optional int64 template = 2; */
        if (message.template !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).int64(message.template);
        /* repeated string pack_patterns = 3; */
        for (let i = 0; i < message.packPatterns.length; i++)
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.packPatterns[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.NewProjectRequest
 */
exports.NewProjectRequest = new NewProjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NewProjectResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.NewProjectResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.NewProjectResponse
 */
exports.NewProjectResponse = new NewProjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteProjectRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.DeleteProjectRequest", [
            { no: 1, name: "project", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.project = 0n;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 project */ 1:
                    message.project = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 project = 1; */
        if (message.project !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.project);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.DeleteProjectRequest
 */
exports.DeleteProjectRequest = new DeleteProjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteProjectResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.DeleteProjectResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.DeleteProjectResponse
 */
exports.DeleteProjectResponse = new DeleteProjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Project$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.Project", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = 0n;
        message.version = 0n;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 version */ 2:
                    message.version = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.id);
        /* int64 version = 2; */
        if (message.version !== 0n)
            writer.tag(2, runtime_1.WireType.Varint).int64(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.Project
 */
exports.Project = new Project$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListProjectsRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.ListProjectsRequest", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.ListProjectsRequest
 */
exports.ListProjectsRequest = new ListProjectsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListProjectsResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.ListProjectsResponse", [
            { no: 1, name: "projects", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.Project }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.projects = [];
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pb.Project projects */ 1:
                    message.projects.push(exports.Project.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated pb.Project projects = 1; */
        for (let i = 0; i < message.projects.length; i++)
            exports.Project.internalBinaryWrite(message.projects[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.ListProjectsResponse
 */
exports.ListProjectsResponse = new ListProjectsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Objekt$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.Objekt", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "mode", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "content", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.path = "";
        message.mode = 0n;
        message.size = 0n;
        message.deleted = false;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                case /* int64 mode */ 2:
                    message.mode = reader.int64().toBigInt();
                    break;
                case /* int64 size */ 3:
                    message.size = reader.int64().toBigInt();
                    break;
                case /* bool deleted */ 4:
                    message.deleted = reader.bool();
                    break;
                case /* optional bytes content */ 5:
                    message.content = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.path);
        /* int64 mode = 2; */
        if (message.mode !== 0n)
            writer.tag(2, runtime_1.WireType.Varint).int64(message.mode);
        /* int64 size = 3; */
        if (message.size !== 0n)
            writer.tag(3, runtime_1.WireType.Varint).int64(message.size);
        /* bool deleted = 4; */
        if (message.deleted !== false)
            writer.tag(4, runtime_1.WireType.Varint).bool(message.deleted);
        /* optional bytes content = 5; */
        if (message.content !== undefined)
            writer.tag(5, runtime_1.WireType.LengthDelimited).bytes(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.Objekt
 */
exports.Objekt = new Objekt$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ObjectQuery$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.ObjectQuery", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "is_prefix", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "ignores", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "subpaths", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.path = "";
        message.isPrefix = false;
        message.ignores = [];
        message.subpaths = [];
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                case /* bool is_prefix */ 2:
                    message.isPrefix = reader.bool();
                    break;
                case /* repeated string ignores */ 4:
                    message.ignores.push(reader.string());
                    break;
                case /* repeated string subpaths */ 5:
                    message.subpaths.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.path);
        /* bool is_prefix = 2; */
        if (message.isPrefix !== false)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.isPrefix);
        /* repeated string ignores = 4; */
        for (let i = 0; i < message.ignores.length; i++)
            writer.tag(4, runtime_1.WireType.LengthDelimited).string(message.ignores[i]);
        /* repeated string subpaths = 5; */
        for (let i = 0; i < message.subpaths.length; i++)
            writer.tag(5, runtime_1.WireType.LengthDelimited).string(message.subpaths[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.ObjectQuery
 */
exports.ObjectQuery = new ObjectQuery$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.GetRequest", [
            { no: 1, name: "project", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "from_version", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "to_version", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "queries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ObjectQuery }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.project = 0n;
        message.queries = [];
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 project */ 1:
                    message.project = reader.int64().toBigInt();
                    break;
                case /* optional int64 from_version */ 2:
                    message.fromVersion = reader.int64().toBigInt();
                    break;
                case /* optional int64 to_version */ 3:
                    message.toVersion = reader.int64().toBigInt();
                    break;
                case /* repeated pb.ObjectQuery queries */ 4:
                    message.queries.push(exports.ObjectQuery.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 project = 1; */
        if (message.project !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.project);
        /* optional int64 from_version = 2; */
        if (message.fromVersion !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).int64(message.fromVersion);
        /* optional int64 to_version = 3; */
        if (message.toVersion !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int64(message.toVersion);
        /* repeated pb.ObjectQuery queries = 4; */
        for (let i = 0; i < message.queries.length; i++)
            exports.ObjectQuery.internalBinaryWrite(message.queries[i], writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GetRequest
 */
exports.GetRequest = new GetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.GetResponse", [
            { no: 1, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "object", kind: "message", T: () => exports.Objekt }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.version = 0n;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 version */ 1:
                    message.version = reader.int64().toBigInt();
                    break;
                case /* pb.Objekt object */ 2:
                    message.object = exports.Objekt.internalBinaryRead(reader, reader.uint32(), options, message.object);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 version = 1; */
        if (message.version !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.version);
        /* pb.Objekt object = 2; */
        if (message.object)
            exports.Objekt.internalBinaryWrite(message.object, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GetResponse
 */
exports.GetResponse = new GetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCompressRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.GetCompressRequest", [
            { no: 1, name: "project", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "from_version", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "to_version", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "queries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ObjectQuery },
            { no: 6, name: "available_cache_versions", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.project = 0n;
        message.queries = [];
        message.availableCacheVersions = [];
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 project */ 1:
                    message.project = reader.int64().toBigInt();
                    break;
                case /* optional int64 from_version */ 2:
                    message.fromVersion = reader.int64().toBigInt();
                    break;
                case /* optional int64 to_version */ 3:
                    message.toVersion = reader.int64().toBigInt();
                    break;
                case /* repeated pb.ObjectQuery queries */ 5:
                    message.queries.push(exports.ObjectQuery.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated int64 available_cache_versions */ 6:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.availableCacheVersions.push(reader.int64().toBigInt());
                    else
                        message.availableCacheVersions.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 project = 1; */
        if (message.project !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.project);
        /* optional int64 from_version = 2; */
        if (message.fromVersion !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).int64(message.fromVersion);
        /* optional int64 to_version = 3; */
        if (message.toVersion !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int64(message.toVersion);
        /* repeated pb.ObjectQuery queries = 5; */
        for (let i = 0; i < message.queries.length; i++)
            exports.ObjectQuery.internalBinaryWrite(message.queries[i], writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated int64 available_cache_versions = 6; */
        if (message.availableCacheVersions.length) {
            writer.tag(6, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.availableCacheVersions.length; i++)
                writer.int64(message.availableCacheVersions[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GetCompressRequest
 */
exports.GetCompressRequest = new GetCompressRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCompressResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.GetCompressResponse", [
            { no: 1, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "format", kind: "enum", T: () => ["pb.GetCompressResponse.Format", GetCompressResponse_Format] },
            { no: 3, name: "bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "pack_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.version = 0n;
        message.format = 0;
        message.bytes = new Uint8Array(0);
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 version */ 1:
                    message.version = reader.int64().toBigInt();
                    break;
                case /* pb.GetCompressResponse.Format format */ 2:
                    message.format = reader.int32();
                    break;
                case /* bytes bytes */ 3:
                    message.bytes = reader.bytes();
                    break;
                case /* optional string pack_path */ 4:
                    message.packPath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 version = 1; */
        if (message.version !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.version);
        /* pb.GetCompressResponse.Format format = 2; */
        if (message.format !== 0)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.format);
        /* bytes bytes = 3; */
        if (message.bytes.length)
            writer.tag(3, runtime_1.WireType.LengthDelimited).bytes(message.bytes);
        /* optional string pack_path = 4; */
        if (message.packPath !== undefined)
            writer.tag(4, runtime_1.WireType.LengthDelimited).string(message.packPath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GetCompressResponse
 */
exports.GetCompressResponse = new GetCompressResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUnaryRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.GetUnaryRequest", [
            { no: 1, name: "project", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "from_version", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "to_version", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "queries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ObjectQuery }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.project = 0n;
        message.queries = [];
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 project */ 1:
                    message.project = reader.int64().toBigInt();
                    break;
                case /* optional int64 from_version */ 2:
                    message.fromVersion = reader.int64().toBigInt();
                    break;
                case /* optional int64 to_version */ 3:
                    message.toVersion = reader.int64().toBigInt();
                    break;
                case /* repeated pb.ObjectQuery queries */ 4:
                    message.queries.push(exports.ObjectQuery.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 project = 1; */
        if (message.project !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.project);
        /* optional int64 from_version = 2; */
        if (message.fromVersion !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).int64(message.fromVersion);
        /* optional int64 to_version = 3; */
        if (message.toVersion !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int64(message.toVersion);
        /* repeated pb.ObjectQuery queries = 4; */
        for (let i = 0; i < message.queries.length; i++)
            exports.ObjectQuery.internalBinaryWrite(message.queries[i], writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GetUnaryRequest
 */
exports.GetUnaryRequest = new GetUnaryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUnaryResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.GetUnaryResponse", [
            { no: 1, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "objects", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.Objekt }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.version = 0n;
        message.objects = [];
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 version */ 1:
                    message.version = reader.int64().toBigInt();
                    break;
                case /* repeated pb.Objekt objects */ 2:
                    message.objects.push(exports.Objekt.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 version = 1; */
        if (message.version !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.version);
        /* repeated pb.Objekt objects = 2; */
        for (let i = 0; i < message.objects.length; i++)
            exports.Objekt.internalBinaryWrite(message.objects[i], writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GetUnaryResponse
 */
exports.GetUnaryResponse = new GetUnaryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.UpdateRequest", [
            { no: 1, name: "project", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "object", kind: "message", T: () => exports.Objekt }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.project = 0n;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 project */ 1:
                    message.project = reader.int64().toBigInt();
                    break;
                case /* pb.Objekt object */ 2:
                    message.object = exports.Objekt.internalBinaryRead(reader, reader.uint32(), options, message.object);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 project = 1; */
        if (message.project !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.project);
        /* pb.Objekt object = 2; */
        if (message.object)
            exports.Objekt.internalBinaryWrite(message.object, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.UpdateRequest
 */
exports.UpdateRequest = new UpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.UpdateResponse", [
            { no: 1, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.version = 0n;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 version */ 1:
                    message.version = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 version = 1; */
        if (message.version !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.UpdateResponse
 */
exports.UpdateResponse = new UpdateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RollbackRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.RollbackRequest", [
            { no: 1, name: "project", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.project = 0n;
        message.version = 0n;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 project */ 1:
                    message.project = reader.int64().toBigInt();
                    break;
                case /* int64 version */ 2:
                    message.version = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 project = 1; */
        if (message.project !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.project);
        /* int64 version = 2; */
        if (message.version !== 0n)
            writer.tag(2, runtime_1.WireType.Varint).int64(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.RollbackRequest
 */
exports.RollbackRequest = new RollbackRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RollbackResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.RollbackResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.RollbackResponse
 */
exports.RollbackResponse = new RollbackResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InspectRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.InspectRequest", [
            { no: 1, name: "project", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.project = 0n;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 project */ 1:
                    message.project = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 project = 1; */
        if (message.project !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.project);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.InspectRequest
 */
exports.InspectRequest = new InspectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InspectResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.InspectResponse", [
            { no: 1, name: "project", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "latest_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "live_objects_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "total_objects_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.project = 0n;
        message.latestVersion = 0n;
        message.liveObjectsCount = 0n;
        message.totalObjectsCount = 0n;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 project */ 1:
                    message.project = reader.int64().toBigInt();
                    break;
                case /* int64 latest_version */ 2:
                    message.latestVersion = reader.int64().toBigInt();
                    break;
                case /* int64 live_objects_count */ 3:
                    message.liveObjectsCount = reader.int64().toBigInt();
                    break;
                case /* int64 total_objects_count */ 4:
                    message.totalObjectsCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 project = 1; */
        if (message.project !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.project);
        /* int64 latest_version = 2; */
        if (message.latestVersion !== 0n)
            writer.tag(2, runtime_1.WireType.Varint).int64(message.latestVersion);
        /* int64 live_objects_count = 3; */
        if (message.liveObjectsCount !== 0n)
            writer.tag(3, runtime_1.WireType.Varint).int64(message.liveObjectsCount);
        /* int64 total_objects_count = 4; */
        if (message.totalObjectsCount !== 0n)
            writer.tag(4, runtime_1.WireType.Varint).int64(message.totalObjectsCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.InspectResponse
 */
exports.InspectResponse = new InspectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SnapshotRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.SnapshotRequest", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.SnapshotRequest
 */
exports.SnapshotRequest = new SnapshotRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SnapshotResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.SnapshotResponse", [
            { no: 1, name: "projects", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.Project }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.projects = [];
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pb.Project projects */ 1:
                    message.projects.push(exports.Project.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated pb.Project projects = 1; */
        for (let i = 0; i < message.projects.length; i++)
            exports.Project.internalBinaryWrite(message.projects[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.SnapshotResponse
 */
exports.SnapshotResponse = new SnapshotResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.ResetRequest", [
            { no: 1, name: "projects", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.Project }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.projects = [];
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pb.Project projects */ 1:
                    message.projects.push(exports.Project.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated pb.Project projects = 1; */
        for (let i = 0; i < message.projects.length; i++)
            exports.Project.internalBinaryWrite(message.projects[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.ResetRequest
 */
exports.ResetRequest = new ResetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.ResetResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.ResetResponse
 */
exports.ResetResponse = new ResetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GcProjectRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.GcProjectRequest", [
            { no: 1, name: "project", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "keep_versions", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "from_version", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.project = 0n;
        message.keepVersions = 0n;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 project */ 1:
                    message.project = reader.int64().toBigInt();
                    break;
                case /* int64 keep_versions */ 2:
                    message.keepVersions = reader.int64().toBigInt();
                    break;
                case /* optional int64 from_version */ 3:
                    message.fromVersion = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 project = 1; */
        if (message.project !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.project);
        /* int64 keep_versions = 2; */
        if (message.keepVersions !== 0n)
            writer.tag(2, runtime_1.WireType.Varint).int64(message.keepVersions);
        /* optional int64 from_version = 3; */
        if (message.fromVersion !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int64(message.fromVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GcProjectRequest
 */
exports.GcProjectRequest = new GcProjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GcProjectResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.GcProjectResponse", [
            { no: 1, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "project", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.count = 0n;
        message.project = 0n;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 count */ 1:
                    message.count = reader.int64().toBigInt();
                    break;
                case /* int64 project */ 2:
                    message.project = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 count = 1; */
        if (message.count !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.count);
        /* int64 project = 2; */
        if (message.project !== 0n)
            writer.tag(2, runtime_1.WireType.Varint).int64(message.project);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GcProjectResponse
 */
exports.GcProjectResponse = new GcProjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GcRandomProjectsRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.GcRandomProjectsRequest", [
            { no: 1, name: "sample", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "keep_versions", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "from_version", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sample = 0;
        message.keepVersions = 0n;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float sample */ 1:
                    message.sample = reader.float();
                    break;
                case /* int64 keep_versions */ 2:
                    message.keepVersions = reader.int64().toBigInt();
                    break;
                case /* optional int64 from_version */ 3:
                    message.fromVersion = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* float sample = 1; */
        if (message.sample !== 0)
            writer.tag(1, runtime_1.WireType.Bit32).float(message.sample);
        /* int64 keep_versions = 2; */
        if (message.keepVersions !== 0n)
            writer.tag(2, runtime_1.WireType.Varint).int64(message.keepVersions);
        /* optional int64 from_version = 3; */
        if (message.fromVersion !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int64(message.fromVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GcRandomProjectsRequest
 */
exports.GcRandomProjectsRequest = new GcRandomProjectsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GcRandomProjectsResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.GcRandomProjectsResponse", [
            { no: 1, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "projects", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.count = 0n;
        message.projects = [];
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 count */ 1:
                    message.count = reader.int64().toBigInt();
                    break;
                case /* repeated int64 projects */ 2:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.projects.push(reader.int64().toBigInt());
                    else
                        message.projects.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 count = 1; */
        if (message.count !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.count);
        /* repeated int64 projects = 2; */
        if (message.projects.length) {
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.projects.length; i++)
                writer.int64(message.projects[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GcRandomProjectsResponse
 */
exports.GcRandomProjectsResponse = new GcRandomProjectsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GcContentsRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.GcContentsRequest", [
            { no: 1, name: "sample", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sample = 0;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float sample */ 1:
                    message.sample = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* float sample = 1; */
        if (message.sample !== 0)
            writer.tag(1, runtime_1.WireType.Bit32).float(message.sample);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GcContentsRequest
 */
exports.GcContentsRequest = new GcContentsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GcContentsResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.GcContentsResponse", [
            { no: 1, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.count = 0n;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 count */ 1:
                    message.count = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 count = 1; */
        if (message.count !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GcContentsResponse
 */
exports.GcContentsResponse = new GcContentsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CloneToProjectRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.CloneToProjectRequest", [
            { no: 1, name: "source", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "target", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.source = 0n;
        message.version = 0n;
        message.target = 0n;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 source */ 1:
                    message.source = reader.int64().toBigInt();
                    break;
                case /* int64 version */ 2:
                    message.version = reader.int64().toBigInt();
                    break;
                case /* int64 target */ 3:
                    message.target = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 source = 1; */
        if (message.source !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.source);
        /* int64 version = 2; */
        if (message.version !== 0n)
            writer.tag(2, runtime_1.WireType.Varint).int64(message.version);
        /* int64 target = 3; */
        if (message.target !== 0n)
            writer.tag(3, runtime_1.WireType.Varint).int64(message.target);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.CloneToProjectRequest
 */
exports.CloneToProjectRequest = new CloneToProjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CloneToProjectResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.CloneToProjectResponse", [
            { no: 1, name: "latest_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.latestVersion = 0n;
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 latest_version */ 1:
                    message.latestVersion = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 latest_version = 1; */
        if (message.latestVersion !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.latestVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.CloneToProjectResponse
 */
exports.CloneToProjectResponse = new CloneToProjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCacheRequest$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.GetCacheRequest", [
            { no: 1, name: "version", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int64 version */ 1:
                    message.version = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int64 version = 1; */
        if (message.version !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GetCacheRequest
 */
exports.GetCacheRequest = new GetCacheRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCacheResponse$Type extends runtime_4.MessageType {
    constructor() {
        super("pb.GetCacheResponse", [
            { no: 1, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "format", kind: "enum", T: () => ["pb.GetCacheResponse.Format", GetCacheResponse_Format] },
            { no: 3, name: "bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.version = 0n;
        message.format = 0;
        message.bytes = new Uint8Array(0);
        message.hash = new Uint8Array(0);
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 version */ 1:
                    message.version = reader.int64().toBigInt();
                    break;
                case /* pb.GetCacheResponse.Format format */ 2:
                    message.format = reader.int32();
                    break;
                case /* bytes bytes */ 3:
                    message.bytes = reader.bytes();
                    break;
                case /* bytes hash */ 4:
                    message.hash = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 version = 1; */
        if (message.version !== 0n)
            writer.tag(1, runtime_1.WireType.Varint).int64(message.version);
        /* pb.GetCacheResponse.Format format = 2; */
        if (message.format !== 0)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.format);
        /* bytes bytes = 3; */
        if (message.bytes.length)
            writer.tag(3, runtime_1.WireType.LengthDelimited).bytes(message.bytes);
        /* bytes hash = 4; */
        if (message.hash.length)
            writer.tag(4, runtime_1.WireType.LengthDelimited).bytes(message.hash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GetCacheResponse
 */
exports.GetCacheResponse = new GetCacheResponse$Type();
/**
 * @generated ServiceType for protobuf service pb.Fs
 */
exports.Fs = new runtime_rpc_1.ServiceType("pb.Fs", [
    { name: "NewProject", options: {}, I: exports.NewProjectRequest, O: exports.NewProjectResponse },
    { name: "DeleteProject", options: {}, I: exports.DeleteProjectRequest, O: exports.DeleteProjectResponse },
    { name: "ListProjects", options: {}, I: exports.ListProjectsRequest, O: exports.ListProjectsResponse },
    { name: "Get", serverStreaming: true, options: {}, I: exports.GetRequest, O: exports.GetResponse },
    { name: "GetCompress", serverStreaming: true, options: {}, I: exports.GetCompressRequest, O: exports.GetCompressResponse },
    { name: "GetUnary", options: {}, I: exports.GetUnaryRequest, O: exports.GetUnaryResponse },
    { name: "Update", clientStreaming: true, options: {}, I: exports.UpdateRequest, O: exports.UpdateResponse },
    { name: "Rollback", options: {}, I: exports.RollbackRequest, O: exports.RollbackResponse },
    { name: "Inspect", options: {}, I: exports.InspectRequest, O: exports.InspectResponse },
    { name: "Snapshot", options: {}, I: exports.SnapshotRequest, O: exports.SnapshotResponse },
    { name: "Reset", options: {}, I: exports.ResetRequest, O: exports.ResetResponse },
    { name: "GcProject", options: {}, I: exports.GcProjectRequest, O: exports.GcProjectResponse },
    { name: "GcRandomProjects", options: {}, I: exports.GcRandomProjectsRequest, O: exports.GcRandomProjectsResponse },
    { name: "GcContents", options: {}, I: exports.GcContentsRequest, O: exports.GcContentsResponse },
    { name: "CloneToProject", options: {}, I: exports.CloneToProjectRequest, O: exports.CloneToProjectResponse },
    { name: "GetCache", serverStreaming: true, options: {}, I: exports.GetCacheRequest, O: exports.GetCacheResponse }
]);
//# sourceMappingURL=fs_pb.js.map
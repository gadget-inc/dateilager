{"version":3,"file":"telemetry.js","sourceRoot":"","sources":["../../../src/internal/telemetry.ts"],"names":[],"mappings":";;;AACA,4CAAuD;AAEvD,gBAAgB;AACH,QAAA,MAAM,GAAG,WAAQ,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC;AAElE;;;;GAIG;AACH,SAAgB,KAAK,CAAI,IAAY,EAAE,OAAoB,EAAE,EAAqB;IAChF,OAAO,cAAM,CAAC,eAAe,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,IAAI,EAAE,EAAE;QACpD,IAAI;YACF,MAAM,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;YAExB,yGAAyG;YACzG,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,EAAE;gBAC9B,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;aAC1D;YAED,IAAI,CAAC,GAAG,EAAE,CAAC;YACX,OAAO,MAAM,CAAC;SACf;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,GAAG,EAAE,CAAC;YACX,MAAM,GAAG,CAAC;SACX;IACH,CAAC,CAAM,CAAC;AACV,CAAC;AAjBD,sBAiBC","sourcesContent":["import type { Span, SpanOptions } from \"@opentelemetry/api\";\nimport { trace as traceAPI } from \"@opentelemetry/api\";\n\n/** @internal */\nexport const tracer = traceAPI.getTracer(\"@gadgetinc/dateilager\");\n\n/**\n * Run a function within a traced span.\n *\n * @internal\n */\nexport function trace<T>(name: string, options: SpanOptions, fn: (span: Span) => T): T {\n  return tracer.startActiveSpan(name, options, (span) => {\n    try {\n      const result = fn(span);\n\n      // to reduce overhead and keep the same return type, only instantiate a promise if a promise was returned\n      if (result && \"then\" in result) {\n        return Promise.resolve(result).finally(() => span.end());\n      }\n\n      span.end();\n      return result;\n    } catch (err) {\n      span.end();\n      throw err;\n    }\n  }) as T;\n}\n"]}
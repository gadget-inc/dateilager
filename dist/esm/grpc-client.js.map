{"version":3,"file":"grpc-client.js","sourceRoot":"","sources":["../../src/grpc-client.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ClientOptions } from \"@grpc/grpc-js\";\nimport { ChannelCredentials, credentials, Metadata } from \"@grpc/grpc-js\";\nimport type { Span } from \"@opentelemetry/api\";\nimport { context as contextAPI, trace as traceAPI } from \"@opentelemetry/api\";\nimport { GrpcTransport } from \"@protobuf-ts/grpc-transport\";\nimport { RpcError, type ClientStreamingCall, type RpcOptions } from \"@protobuf-ts/runtime-rpc\";\nimport { TextDecoder, TextEncoder } from \"util\";\nimport { trace, tracer } from \"./internal/telemetry\";\nimport type { CloneToProjectResponse, GetUnaryResponse, Objekt, Project, UpdateRequest, UpdateResponse } from \"./pb/fs_pb\";\nimport { FsClient } from \"./pb/fs_pb.client\";\nimport { ProjectAlreadyExistsError } from \"./utils/errors\";\nexport type { Objekt, Project };\n\n/**\n * Options for {@link DateiLagerGrpcClient}.\n */\nexport interface DateiLagerGrpcClientOptions {\n  /**\n   * The address of the dateilager server.\n   */\n  server:\n    | string\n    | {\n        /**\n         * The host of the dateilager server.\n         */\n        host: string;\n\n        /**\n         * The port of the dateilager server.\n         */\n        port: number;\n      };\n\n  /**\n   * The token that will be sent as authorization metadata to the dateilager server.\n   */\n  token: string | (() => Promise<string>);\n\n  /**\n   * Options that will be passed to the underlying grpc client constructor.\n   * @see ClientOptions\n   */\n  grpcClientOptions?: ClientOptions;\n\n  /**\n   * Options that will be passed to every remote procedure call.\n   * @see RpcOptions\n   */\n  rpcOptions?: RpcOptions | (() => RpcOptions | undefined);\n}\n\n/**\n * A client class for interacting with DateiLager's GRPC API.\n *\n * The DateiLager API surface area is as minimal as possible;\n * convenience functions, such as getObject, should be implemented within the client.\n */\nexport class DateiLagerGrpcClient {\n  /** @internal */\n  private readonly _client: FsClient;\n\n  /** @internal */\n  private readonly _transport: GrpcTransport;\n\n  /** @internal */\n  private readonly _rpcOptions: () => RpcOptions | undefined;\n\n  /**\n   * The library used to interact with GRPC creates connections lazily, this constructor will not\n   * raise an error even if there is no service running at {@link DateiLagerGrpcClientOptions.server server}.\n   * @param options Grpc client options.\n   */\n  public constructor(options: DateiLagerGrpcClientOptions) {\n    const tokenFn = typeof options.token === \"string\" ? () => Promise.resolve(options.token as string) : options.token;\n\n    this._transport = new GrpcTransport({\n      host: typeof options.server === \"string\" ? options.server : `${options.server.host}:${options.server.port}`,\n      channelCredentials: credentials.combineChannelCredentials(\n        ChannelCredentials.createSsl(),\n        credentials.createFromMetadataGenerator((_, callback) => {\n          tokenFn()\n            .then((token) => {\n              const meta = new Metadata();\n              meta.add(\"authorization\", `Bearer ${token}`);\n              callback(null, meta);\n            })\n            .catch(callback);\n        })\n      ),\n      clientOptions: {\n        \"grpc.keepalive_time_ms\": 5_000,\n        \"grpc.keepalive_timeout_ms\": 1_000,\n        \"grpc.keepalive_permit_without_calls\": 1,\n        ...options.grpcClientOptions,\n      },\n    });\n\n    this._client = new FsClient(this._transport);\n\n    this._rpcOptions = options.rpcOptions instanceof Function ? options.rpcOptions : () => options.rpcOptions as RpcOptions | undefined;\n  }\n\n  /**\n   * Close the underlying GRPC client.\n   */\n  public close(): void {\n    this._transport.close();\n  }\n\n  /**\n   * Create a new project.\n   * @param project      The id of the project.\n   * @param packPatterns The paths to pack.\n   * @param template     The id of the project to start from.\n   */\n  public async newProject(project: bigint, packPatterns: string[], template?: bigint): Promise<void> {\n    try {\n      await trace(\n        \"dateilager-grpc-client.new-project\",\n        {\n          attributes: {\n            \"dl.project\": String(project),\n            \"dl.pack_patterns\": packPatterns,\n            \"dl.template\": String(template),\n          },\n        },\n        () => this._client.newProject({ id: project, packPatterns, template }, this._rpcOptions())\n      );\n    } catch (error) {\n      if (error instanceof RpcError && error.code == \"ALREADY_EXISTS\") {\n        throw new ProjectAlreadyExistsError(`project id ${project} already exists`);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Delete a project.\n   * @param project The id of the project.\n   */\n  public async deleteProject(project: bigint): Promise<void> {\n    await trace(\n      \"dateilager-grpc-client.delete-project\",\n      {\n        attributes: {\n          \"dl.project\": String(project),\n        },\n      },\n      () => this._client.deleteProject({ project }, this._rpcOptions())\n    );\n  }\n\n  /**\n   * List objects.\n   * @param  project The id of the project.\n   * @param  path    The path to list objects under.\n   * @param  ignores The paths under {@link path} to ignore.\n   * @param  from    The project version to start from.\n   * @param  to      The project version to end at.\n   * @returns        A stream of objects.\n   * @yields           An object from the stream.\n   * @example\n   * for await (const object of client.listObjects(1n, \"\")) {\n   *   console.log(\"[listObjects] path: \" + object.path);\n   *   console.log(\"[listObjects] content:\\n\" + object.content);\n   * }\n   */\n  public async *listObjects(\n    project: bigint,\n    path: string,\n    ignores: string[] = [],\n    from?: bigint,\n    to?: bigint\n  ): AsyncGenerator<Objekt, void> {\n    const parentContext = contextAPI.active();\n    const span = tracer.startSpan(\n      \"dateilager-grpc-client.list-objects\",\n      {\n        attributes: {\n          \"dl.project\": String(project),\n          \"dl.path\": path,\n          \"dl.ignores\": ignores,\n          \"dl.from_version\": String(from),\n          \"dl.to_version\": String(to),\n        },\n      },\n      parentContext\n    );\n\n    try {\n      const call = contextAPI.with(traceAPI.setSpan(parentContext, span), () =>\n        this._client.get(\n          {\n            project,\n            fromVersion: from,\n            toVersion: to,\n            queries: [\n              {\n                path,\n                ignores,\n                isPrefix: true,\n                subpaths: [],\n              },\n            ],\n          },\n          this._rpcOptions()\n        )\n      );\n\n      for await (const response of call.responses) {\n        if (response.object) {\n          yield response.object;\n        }\n      }\n\n      await call.status;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get objects.\n   * @param project The id of the project.\n   * @param path    The path to get objects under.\n   * @param ignores The paths under {@link path} to ignore.\n   * @param from    The project version to start from.\n   * @param to      The project version to end at.\n   * @param maxSize The maximum file size at which the content of the file is sent for.\n   * @returns       All the objects under {@link path}.\n   * @example\n   * const response = await client.getObjects(1n, \"\");\n   * for (const object of response.objects) {\n   *   console.log(\"[getObjects] path: \" + object.path);\n   *   console.log(\"[getObjects] content:\\n\" + object.content);\n   * }\n   */\n  public async getObjects(\n    project: bigint,\n    path: string,\n    ignores: string[] = [],\n    from?: bigint,\n    to?: bigint,\n    maxSize?: bigint\n  ): Promise<GetUnaryResponse> {\n    return await trace(\n      \"dateilager-grpc-client.get-unary\",\n      {\n        attributes: {\n          \"dl.project\": String(project),\n          \"dl.path\": path,\n          \"dl.ignores\": ignores,\n          \"dl.from_version\": String(from),\n          \"dl.to_version\": String(to),\n          \"dl.max_content_send_size\": String(maxSize),\n        },\n      },\n      async () => {\n        const call = this._client.getUnary(\n          {\n            project,\n            fromVersion: from,\n            toVersion: to,\n            queries: [{ path, ignores, isPrefix: true, subpaths: [] }],\n            maxContentSendSize: maxSize,\n          },\n          this._rpcOptions()\n        );\n        return await call.response;\n      }\n    );\n  }\n\n  /**\n   * Get an object.\n   * @param project The id of the project.\n   * @param path    The path of the object.\n   * @param from    The project version to start from.\n   * @param to      The project version to end at.\n   * @returns       The object at the given path or undefined if it does not exist.\n   */\n  public async getObject(project: bigint, path: string, from?: bigint, to?: bigint): Promise<Objekt | undefined> {\n    return await trace(\n      \"dateilager-grpc-client.get-object\",\n      {\n        attributes: {\n          \"dl.project\": String(project),\n          \"dl.path\": path,\n          \"dl.from_version\": String(from),\n          \"dl.to_version\": String(to),\n        },\n      },\n      async () => {\n        const call = this._client.get(\n          {\n            project,\n            fromVersion: from,\n            toVersion: to,\n            queries: [\n              {\n                path,\n                isPrefix: false,\n                ignores: [],\n                subpaths: [],\n              },\n            ],\n          },\n          this._rpcOptions()\n        );\n\n        let object: Objekt | undefined;\n        for await (const response of call.responses) {\n          object = response.object;\n        }\n\n        await call.status;\n\n        return object;\n      }\n    );\n  }\n\n  /**\n   * Update objects.\n   * @param project The id of the project.\n   * @returns       An {@link UpdateInputStream} to send objects to update.\n   */\n  public updateObjects(project: bigint): UpdateInputStream {\n    const parentContext = contextAPI.active();\n    const span = tracer.startSpan(\n      \"dateilager-grpc-client.update-objects\",\n      {\n        attributes: {\n          \"dl.project\": String(project),\n        },\n      },\n      parentContext\n    );\n\n    const call = contextAPI.with(traceAPI.setSpan(parentContext, span), () => this._client.update(this._rpcOptions()));\n\n    return new UpdateInputStream(project, call, span);\n  }\n\n  /**\n   * Update an object.\n   * @param project The id of the project.\n   * @param obj     The object to update.\n   * @returns       The latest project version or `null` if something went wrong.\n   */\n  public async updateObject(project: bigint, obj: Objekt): Promise<bigint | null> {\n    const stream = this.updateObjects(project);\n    await stream.send(obj);\n    return await stream.complete();\n  }\n\n  /**\n   * Rollback a project.\n   * @param project The id of the project.\n   * @param version The version to rollback to.\n   */\n  public async rollbackProject(project: bigint, version: bigint): Promise<void> {\n    await this._client.rollback({ project, version }, this._rpcOptions());\n  }\n\n  /**\n   * Snapshot the current state of the dateilager server.\n   * @returns All the projects on the dateilager server.\n   * @throws If the dateilager server's DL_ENV environment variable is PROD.\n   * @see DateiLagerGrpcClient.resetToSnapshotInDevOrTests\n   */\n  public async snapshotInDevOrTests(): Promise<Project[]> {\n    const call = await this._client.snapshot({}, this._rpcOptions());\n    return call.response.projects;\n  }\n\n  /**\n   * Reset the given projects to their respective versions and delete any remaining projects.\n   * If no projects are provided, delete all projects.\n   * @param projects The projects to reset.\n   * @throws If the dateilager server's DL_ENV environment variable is PROD.\n   * @see DateiLagerGrpcClient.snapshotInDevOrTests\n   */\n  public async resetToSnapshotInDevOrTests(projects: Project[]): Promise<void> {\n    await this._client.reset({ projects }, this._rpcOptions());\n  }\n\n  /**\n   * Clones the `source` projects changes (from `fromVersion` up to `toVersion`) to the `target` project.\n   * This method assumes that it is always a one way clone from source to target, it does not take into account\n   * the changes that have occurred in the `target` project.\n   * @param source  The source project.\n   * @param target  The target project.\n   * @param version The version of the source project to clone up to.\n   * @returns       The new version number of the target project.\n   */\n  public async cloneToProject(source: bigint, target: bigint, version: bigint): Promise<CloneToProjectResponse> {\n    return await trace(\n      \"dateilager-grpc-client.clone-to-project\",\n      {\n        attributes: {\n          \"dl.source\": String(source),\n          \"dl.target\": String(target),\n          \"dl.version\": String(version),\n        },\n      },\n      async () => {\n        const call = await this._client.cloneToProject({ source, target, version }, this._rpcOptions());\n        return call.response;\n      }\n    );\n  }\n\n  /**\n   * GC project.\n   * @param project The project to GC.\n   * @param keep    The amount of versions since the latest that should be kept.\n   * @param from    The starting version to GC from.\n   * @returns       The amount of objects that were GC'd.\n   */\n  public async gcProject(project: bigint, keep: bigint, from?: bigint): Promise<bigint> {\n    const call = await this._client.gcProject({\n      project: project,\n      keepVersions: keep,\n      fromVersion: from,\n    });\n    return call.response.count;\n  }\n\n  /**\n   * GC random projects.\n   * @param sample The percentage of projects to sample from.\n   * @param keep   The amount of versions since the latest that should be kept.\n   * @param from   The starting version to GC from.\n   * @returns      The amount of objects that were GC'd.\n   */\n  public async gcRandomProjects(sample: number, keep: bigint, from?: bigint): Promise<bigint> {\n    const call = await this._client.gcRandomProjects({\n      sample: sample,\n      keepVersions: keep,\n      fromVersion: from,\n    });\n    return call.response.count;\n  }\n\n  /**\n   * GC contents.\n   * @param sample The percentage of projects to sample from.\n   * @returns      The amount of objects that were GC'd.\n   */\n  public async gcContents(sample: number): Promise<bigint> {\n    const call = await this._client.gcContents({\n      sample: sample,\n    });\n    return call.response.count;\n  }\n}\n\n/**\n * Used to send a stream of objects to update.\n * @see DateiLagerGrpcClient.updateObjects\n */\nclass UpdateInputStream {\n  /** @internal */\n  private readonly _project: bigint;\n\n  /** @internal */\n  private readonly _call: ClientStreamingCall<UpdateRequest, UpdateResponse>;\n\n  /** @internal */\n  private readonly _span: Span;\n\n  public constructor(project: bigint, call: ClientStreamingCall<UpdateRequest, UpdateResponse>, span: Span) {\n    this._project = project;\n    this._call = call;\n    this._span = span;\n  }\n\n  /**\n   * Send an object to update.\n   * @param obj The object to update.\n   */\n  public async send(obj: Objekt): Promise<void> {\n    try {\n      await this._call.requests.send({\n        project: this._project,\n        object: obj,\n      });\n    } catch (err) {\n      this._span.end();\n      throw err;\n    }\n  }\n\n  /**\n   * Complete the update request.\n   * @returns The latest project version or `null` if something went wrong.\n   */\n  public async complete(): Promise<bigint | null> {\n    try {\n      await this._call.requests.complete();\n      const response = await this._call.response;\n      return response.version != -1n ? response.version : null;\n    } finally {\n      this._span.end();\n    }\n  }\n}\n\nconst encoder = new TextEncoder();\n\n/**\n * Encode string object contents as an array of bytes.\n * @param content The string to encode.\n * @returns       The encoded content as an array of bytes.\n */\nexport function encodeContent(content: string): Uint8Array {\n  return encoder.encode(content);\n}\n\nconst decoder = new TextDecoder();\n\n/**\n * Decode an array of bytes as an object's string contents.\n * @param bytes The array of bytes to decode.\n * @returns     The bytes decoded into a string.\n */\nexport function decodeContent(bytes: Uint8Array | undefined): string {\n  return decoder.decode(bytes);\n}\n"]}
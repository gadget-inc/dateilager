{"version":3,"file":"binary-client.js","sourceRoot":"","sources":["../../src/binary-client.ts"],"names":[],"mappings":"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","sourcesContent":["import { context, propagation } from \"@opentelemetry/api\";\nimport type { ExecaReturnValue } from \"execa\";\nimport execa from \"execa\";\nimport fs from \"fs/promises\";\nimport readline from \"readline\";\nimport { trace } from \"./internal/telemetry\";\n\n/**\n * Options for {@link DateiLagerBinaryClient}.\n */\nexport interface DateiLagerBinaryClientOptions {\n  /**\n   * The address of the dateilager server.\n   */\n  server: {\n    /**\n     * The host of the dateilager server.\n     */\n    host: string;\n\n    /**\n     * The port of the dateilager server.\n     */\n    port?: number;\n\n    /**\n     * The GRPC headless service hostname, used for load balancing across multiple servers.\n     */\n    headlessHost?: string;\n  };\n\n  /**\n   * The token that will be sent as authorization metadata to the dateilager server.\n   */\n  token: string | (() => Promise<string>);\n\n  /**\n   * The path to the dateilager-client executable.\n   * @default \"dateilager-client\"\n   */\n  command?: string;\n\n  /**\n   * The default number of milliseconds to wait before terminating any command.\n   * @default 0 No timeout.\n   */\n  timeout?:\n    | number\n    | {\n        /**\n         * The default number of milliseconds to wait before terminating the update command.\n         * @default 0 No timeout.\n         */\n        update?: number;\n\n        /**\n         * The default number of milliseconds to wait before terminating the rebuild command.\n         * @default 0 No timeout.\n         */\n        rebuild?: number;\n\n        /**\n         * The default number of milliseconds to wait before terminating the gc command.\n         * @default 0 No timeout.\n         */\n        gc?: number;\n      };\n\n  /**\n   * Whether the dateilager binary client should enable tracing.\n   * @default false\n   */\n  tracing?: boolean;\n\n  /**\n   * Logging configuration.\n   */\n  logger?: {\n    /**\n     * The log level to pass to the dateilager binary client.\n     */\n    level: \"debug\" | \"info\" | \"warn\" | \"error\";\n\n    /**\n     * The function that will be called when the dateilager binary client logs something.\n     */\n    log: (level: \"debug\" | \"info\" | \"warn\" | \"error\", msg: string, fields: Record<string, unknown>) => void;\n  };\n}\n\n/**\n * The version of the filesystem after the call to rebuild.\n *\n * If a file pattern was included then patternDetected can be used to know if that filepattern was seen while rebuilding.\n */\nexport interface RebuildResult {\n  /**\n   * Filesystem version.\n   */\n  version: bigint;\n  /**\n   * Number of files updated by the rebuild operation.\n   */\n  count: number;\n  /**\n   * Number of packed files copied from the cache during the rebuild operation.\n   */\n  cachedCount: number;\n  /**\n   * Whether or not the file match was detected.\n   */\n  fileMatch: boolean;\n}\n\n/**\n * The Result from calling the Dateilager Garbage Compiler\n */\nexport interface GCResult {\n  /**\n   * The number of records garbage collected\n   */\n  count: number;\n}\n\n/**\n * A version of the DateiLager client that uses the compiled binary client instead of the Javascript one.\n *\n * Useful for working directly with a real filesystem instead of in memory objects.\n */\nexport class DateiLagerBinaryClient {\n  /** @internal */\n  private readonly _options;\n\n  /**\n   * @param options An object with {@link DateiLagerBinaryClientOptions options}.\n   */\n  public constructor(options: DateiLagerBinaryClientOptions) {\n    this._options = {\n      host: options.server.host,\n      port: options.server.port ?? 5051,\n      headlessHost: options.server.headlessHost,\n      token: typeof options.token === \"string\" ? () => Promise.resolve(options.token as string) : options.token,\n      command: options.command ?? \"dateilager-client\",\n      timeout:\n        typeof options.timeout === \"number\"\n          ? {\n              update: options.timeout,\n              rebuild: options.timeout,\n              gc: options.timeout,\n            }\n          : {\n              update: 0,\n              rebuild: 0,\n              gc: 0,\n              ...options.timeout,\n            },\n      tracing: options.tracing ?? false,\n      logger: options.logger,\n    };\n  }\n\n  /**\n   * Update objects in a project based on the differences in a local directory.\n   * @param project          The id of the project.\n   * @param directory        The path of the directory to send updates from.\n   * @param options          Object of options.\n   * @param options.timeout  Number of milliseconds to wait before terminating the process.\n   * @param options.subpaths The paths to include when updating the FS.\n   * @returns                The latest project version or `null` if something went wrong.\n   */\n  public async update(project: bigint, directory: string, options?: { timeout?: number; subpaths?: string[] }): Promise<bigint | null> {\n    return await trace(\n      \"dateilager-binary-client.update\",\n      {\n        attributes: {\n          \"dl.project\": String(project),\n          \"dl.directory\": directory,\n        },\n      },\n      async () => {\n        const args = [\"--dir\", String(directory), \"--project\", String(project)];\n        if (options?.subpaths) {\n          args.push(`--subpaths=${options.subpaths.join(\",\")}`);\n        }\n        const result = await this._call(\"update\", args, directory, options);\n\n        if (result.stdout == \"-1\") {\n          return null;\n        }\n\n        return BigInt(result.stdout);\n      }\n    );\n  }\n\n  /**\n   * Rebuild the local filesystem.\n   * @param project              The id of the project.\n   * @param to                   The version of the project to rebuild the filesystem to.\n   * @param directory            The path of the directory to rebuild the filesystem at.\n   * @param options              Object of options.\n   * @param options.timeout      Number of milliseconds to wait before terminating the process.\n   * @param options.ignores      The paths to ignore when rebuilding the FS.\n   * @param options.subpaths     The paths to include when rebuilding the FS.\n   * @param options.summarize    Should produce the summary file after rebuilding.\n   * @param options.cacheDir     Path where the cache directory is mounted.\n   * @param options.matchInclude Set fileMatch to true if the written files are matched by this glob pattern\n   * @param options.matchExclude Set fileMatch to false if the written files are matched by this glob pattern\n   * @returns                    The latest project version or `null` if something went wrong.\n   */\n  public async rebuild(\n    project: bigint,\n    to: bigint | null,\n    directory: string,\n    options?: {\n      timeout?: number;\n      ignores?: string[];\n      subpaths?: string[];\n      summarize?: boolean;\n      cacheDir?: string;\n      matchInclude?: string;\n      matchExclude?: string;\n    }\n  ): Promise<RebuildResult> {\n    return await trace(\n      \"dateilager-binary-client.rebuild\",\n      {\n        attributes: {\n          \"dl.project\": String(project),\n          \"dl.to\": String(to),\n          \"dl.directory\": directory,\n        },\n      },\n      async () => {\n        await fs.mkdir(directory, { recursive: true });\n\n        const args = [\"--project\", String(project), \"--dir\", directory];\n        if (to) {\n          args.push(\"--to\", String(to));\n        }\n\n        if (options?.ignores) {\n          args.push(\"--ignores\", options.ignores.join(\",\"));\n        }\n\n        if (options?.summarize === false) {\n          args.push(\"--summarize=false\");\n        }\n\n        if (options?.cacheDir) {\n          args.push(`--cachedir=${options.cacheDir}`);\n        }\n\n        if (options?.matchInclude) {\n          args.push(`--matchinclude=${options.matchInclude}`);\n        }\n\n        if (options?.matchExclude) {\n          args.push(`--matchexclude=${options.matchExclude}`);\n        }\n\n        if (options?.subpaths) {\n          args.push(`--subpaths=${options.subpaths.join(\",\")}`);\n        }\n\n        const result = await this._call(\"rebuild\", args, directory, options);\n        const parsed = JSON.parse(result.stdout) as { version: number; count: number; cachedCount: number; fileMatch: boolean };\n        return { version: BigInt(parsed.version), count: parsed.count, cachedCount: parsed.cachedCount, fileMatch: parsed.fileMatch };\n      }\n    );\n  }\n\n  /**\n   * @param sample          sample size of cleanup\n   * @param keep            The amount of records to keep\n   * @param from            Where to start cleanup\n   * @param options         dict options passed\n   * @param options.timeout timeout limit for the request\n   * @returns               The number of records garbage collected\n   */\n  public async gcRandomProjects(sample: number, keep: number, from?: number, options?: { timeout?: number }): Promise<GCResult> {\n    return await trace(\n      \"dateilager-binary-client.gc-random-projects\",\n      {\n        attributes: {\n          \"dl.keep\": String(keep),\n          \"dl.from\": String(from),\n          \"dl.sample\": String(sample),\n        },\n      },\n      async () => {\n        const args = [\"--mode\", \"random-projects\", \"--keep\", String(keep), \"--sample\", String(sample)];\n\n        if (from) args.push(\"--from\", String(from));\n\n        const result = await this._call(\"gc\", args, undefined, options);\n        const parsed = JSON.parse(result.stdout) as { count: number };\n        return { count: parsed.count };\n      }\n    );\n  }\n\n  /**\n   *\n   * @param project         The selected project to cleanup\n   * @param keep            The amount of records to keep\n   * @param from            Where to start cleanup\n   * @param options         dict options passed\n   * @param options.timeout timeout limit for the request\n   * @returns               The number of records garbage collected\n   */\n  public async gcProject(project: number, keep: number, from?: number, options?: { timeout?: number }): Promise<GCResult> {\n    return await trace(\n      \"dateilager-binary-client.gc-project\",\n      {\n        attributes: {\n          \"dl.keep\": String(keep),\n          \"dl.from\": String(from),\n        },\n      },\n      async () => {\n        const args = [\"--mode\", \"project\", \"--keep\", String(keep), \"--project\", String(project)];\n\n        if (from) args.push(\"--from\", String(from));\n\n        const result = await this._call(\"gc\", args, undefined, options);\n        const parsed = JSON.parse(result.stdout) as { count: number };\n        return { count: parsed.count };\n      }\n    );\n  }\n\n  /**\n   *\n   * @param sample          sample size of cleanup\n   * @param options         dict options passed\n   * @param options.timeout timeout limit for the request\n   * @returns               The number of records garbage collected\n   */\n  public async gcContents(sample: number, options?: { timeout?: number }): Promise<GCResult> {\n    return await trace(\n      \"dateilager-binary-client.gc-contents\",\n      {\n        attributes: {\n          \"dl.sample\": String(sample),\n        },\n      },\n      async () => {\n        const args = [\"--mode\", \"contents\", \"--sample\", String(sample)];\n\n        const result = await this._call(\"gc\", args, undefined, options);\n        const parsed = JSON.parse(result.stdout) as { count: number };\n        return { count: parsed.count };\n      }\n    );\n  }\n\n  /** @internal */\n  private async _call(\n    method: \"update\" | \"rebuild\" | \"gc\",\n    args: string[],\n    cwd?: string,\n    options?: { timeout?: number }\n  ): Promise<ExecaReturnValue> {\n    const baseArgs = [method, \"--host\", this._options.host, \"--port\", String(this._options.port), \"--log-encoding\", \"json\"];\n\n    if (this._options.logger) {\n      baseArgs.push(\"--log-level\", this._options.logger.level);\n    }\n\n    if (this._options.headlessHost) {\n      baseArgs.push(\"--headless-host\", this._options.headlessHost);\n    }\n\n    const timeout = options?.timeout ?? this._options.timeout[method];\n    baseArgs.push(\"--timeout\", String(timeout));\n\n    if (this._options.tracing) {\n      const carrier = {};\n      propagation.inject(context.active(), carrier);\n      const otelContext = JSON.stringify(carrier);\n\n      baseArgs.push(\"--tracing\", \"--otel-context\", otelContext);\n    }\n    const subprocess = execa(this._options.command, baseArgs.concat(args), {\n      cwd,\n      cleanup: false, // don't terminate this subprocess process eagerly when the parent process is terminated, which is execa's default behaviour. we use graceful shutdown gadget-side to give running operations a chance to complete, and we don't want to terminate them prematurely\n      env: { DL_TOKEN: await this._options.token() },\n    });\n\n    if (this._options.logger && subprocess.stderr) {\n      readline.createInterface(subprocess.stderr).on(\"line\", (line) => {\n        try {\n          // we purposefully extract and ignore the `ts` field\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { level, msg, ts, ...fields } = JSON.parse(line) as {\n            [key: string]: unknown;\n            level: \"debug\" | \"info\" | \"warn\" | \"error\";\n            msg: string;\n            ts: string | number;\n          };\n\n          this._options.logger?.log(level, msg, fields);\n        } catch (error) {\n          this._options.logger?.log(\"warn\", \"failed to log line\", { error, line });\n        }\n      });\n    }\n\n    return subprocess;\n  }\n}\n"]}